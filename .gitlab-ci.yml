variables:
  IMAGE_TAG_FRONTEND: $CI_REGISTRY_IMAGE/sonicast_front:1.0
  IMAGE_TAG_BACKEND: $CI_REGISTRY_IMAGE/sonicast_back:1.0
  IMAGE_NAME_FRONTEND: FrontEnd
  IMAGE_NAME_BACKEND: BackEnd 

stages:
  - build
 # - deploy

.build_docker_image:
  image: docker:20.10
  services:
    - docker:20.10-dind
  before_script:
    # check variables
    - echo "CI_REGISTRY_IMAGE = $CI_REGISTRY_IMAGE"
    - echo "IMAGE_NAME = $IMAGE_NAME"
    # Create IMAGE Tag
    - export MY_IMAGE_REGISTRY=${CI_REGISTRY_IMAGE}/${IMAGE_NAME}:latest
      # Connect to registry 
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    # check variable
    - echo "IMAGE_NAME = $IMAGE_NAME"
    - echo "MY_IMAGE_REGISTRY = $MY_IMAGE_REGISTRY"
    # build de l'image
    #   - copie du dockerfile et des ressources Ã  la racine du projet
    #   - build de l'image
    - mv docker-images/${IMAGE_NAME}/* .
    - docker build -t ${MY_IMAGE_REGISTRY}  .
    # push dans la registry 
    - docker push ${MY_IMAGE_REGISTRY}

# ---

build_docker_image:
  image: docker:20.10
  services:
    - docker:20.10-dind

# ---

job_build:sonicast_front:
  stage: build
  script:
    - cd ${IMAGE_NAME_FRONTEND}
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build -t $IMAGE_TAG_FRONTEND .
    - docker push $IMAGE_TAG_FRONTEND

job_build:sonicast_back:
  stage: build
  script:
    - cd ${IMAGE_NAME_BACKEND}
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker build -t $IMAGE_TAG_BACKEND .
    - docker push $IMAGE_TAG_BACKEND
# ---

.job_deploy:
  stage: deploy
  script:
    - echo "This job deploy something."
    - echo "Only when all test jobs are finished."

# ----